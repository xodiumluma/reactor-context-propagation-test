/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package reactor.context.propagation.test;

import io.micrometer.context.ContextRegistry;
import io.micrometer.context.ContextSnapshot;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import reactor.core.publisher.Hooks;
import reactor.core.publisher.Mono;

import java.time.Duration;
import java.util.concurrent.ThreadLocalRandom;

import static org.junit.jupiter.api.Assertions.assertEquals;
import org.slf4j.Logger;
import reactor.util.Loggers;
import reactor.util.context.Context;

class AppTest {
    private ContextRegistry registry;

    @BeforeEach void setup() {
        registry = ContextRegistry.getInstance();
    }

    @Test void appWorksAsExpected() {
        var accessor = new ObservationThreadLocalAccessor();
        registry.registerThreadLocalAccessor(accessor);
        final var FIRST = "g'day!!!";
        final var SECOND = "ٱلسَّلَامُ عَلَيْكُمْ,";
        ObservationThreadLocalHolder.setValue(FIRST);
        // capture!
        ContextSnapshot snapshot = ContextSnapshot.captureAllUsing(key -> true, registry);
        // change ThreadLocal
        ObservationThreadLocalHolder.setValue(SECOND);
        try {
            try (ContextSnapshot.Scope scope = snapshot.setThreadLocals()) {
                assertEquals(ObservationThreadLocalHolder.getValue(), FIRST);
            }
            assertEquals(ObservationThreadLocalHolder.getValue(), SECOND);
        } finally {
            // prevent polluting the thread
            ObservationThreadLocalHolder.reset();
        }
    }

    @Test void appWorksWithReactor() throws InterruptedException {
        Loggers.useConsoleLoggers();
        var accessor = new ObservationThreadLocalAccessor();
        registry.registerThreadLocalAccessor(accessor);
        final var STARTING = "STARTING!!";
        final var NEXT = "NEXT!!";
        ObservationThreadLocalHolder.setValue(STARTING);
        // capture!
        ContextSnapshot snapshot = ContextSnapshot.captureAllUsing(key -> true, registry);
        ObservationThreadLocalHolder.setValue(NEXT);
        try {
           try (ContextSnapshot.Scope scope = snapshot.setThreadLocals()) {
               Mono<String> chain = Mono.just("hello starting" + ObservationThreadLocalHolder.getValue())
                 .log();
               Thread mySubscriberThread = new Thread(chain::block);
               mySubscriberThread.start();
               mySubscriberThread.join();
           }
        } finally {
           ObservationThreadLocalHolder.reset();
        }

    }
}
